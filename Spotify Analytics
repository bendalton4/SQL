# For this project, I downloaded Spotify data from Kaggle.
# Then I created a table to insert Spotify data into.
# Finally, I performed analytics on the data using SQL. 

#Creating the table: 
CREATE TABLE BIT_DB.Spotifydata (
id integer PRIMARY KEY,
artist_name varchar NOT NULL,
track_name varchar NOT NULL,
track_id varchar NOT NULL,
popularity integer NOT NULL,
danceability decimal(4,3) NOT NULL,
energy decimal(4,3) NOT NULL,
key integer NOT NULL,
loudness decimal(5,3) NOT NULL,
mode integer NOT NULL,
speechiness decimal(5,4) NOT NULL,
acousticness decimal(6,5) NOT NULL,
instrumentalness text NOT NULL,
liveness decimal(5,4) NOT NULL,
valence decimal(4,3) NOT NULL,
tempo decimal(6,3) NOT NULL,
duration_ms integer NOT NULL,
time_signature integer NOT NULL 
)

#Then I inserted the Spotify Data .csv into the table.

#Next, I explored the data using the following SQL. 

#1. Which track and artist has the longest song?
SELECT track_name, MAX(duration_ms), artist_name
FROM BIT_DB.Spotifydata;

#2. Which artist has the least 'speechiness'?
SELECT artist_name, MIN(speechiness)
FROM BIT_DB.Spotifydata;

3. What is the average tempo for the top 10 songs based on popularity?
SELECT AVG(tempo)
FROM BIT_DB.Spotifydata
WHERE track_name IN (SELECT track_name
FROM BIT_DB.Spotifydata
ORDER BY popularity desc
LIMIT 10);

#4. How many tracks scored at least 0.5 in 'acousticness' and had a tempo of at least 120?
SELECT COUNT(acousticness)
FROM BIT_DB.Spotifydata
WHERE acousticness >= 0.5
AND tempo >= 120;

#5. Label each song as 'Banging', 'Upbeat', 'Chill', or 'Boring' based on the 'energy' category.
SELECT track_name, energy,
    CASE
    WHEN energy >= 0.75 THEN 'Banging'
    WHEN energy >= 0.5 THEN 'Upbeat'
    WHEN energy >= 0.25 THEN 'Chill'
    ELSE 'Boring'
END AS 'Intensity'
FROM BIT_DB.Spotifydata

